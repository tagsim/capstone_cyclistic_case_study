/* 
The first step of analysis is to combine our twelve Cyclistic monthly data Tables into a single table. This table will combine data tables from 1st April 2022
to 31st March 2023. Total row count of.
*/
CREATE TABLE still-tensor-378918.Bikeshare_dataset.combined_dataset AS
SELECT *
FROM (
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.042022-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0520221-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0520222-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0520223-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0620221-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0620222-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0620223-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0720221-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0720222-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0720223-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0820221-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0820222-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0820223-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0920221-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0920222-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.0920223-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.1020221-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.1020222-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.112022-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.122022-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.012023-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.022023-tripdata`
  UNION ALL
  SELECT * FROM `still-tensor-378918.Bikeshare_dataset.032023-tripdata`
);
SELECT * FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`;

/* Data Integrity check: The above code returned a merged 'combined_dataset' sheet containing 5,803,720 rows which was the original total of the twelve Cyclistic
monthly spreadsheets individually. */

/*All thirteen data fields are to be cleaned before data transformation for clearer data insights. Check of customer ID duplication
1. ride_id*/

SELECT 
DISTINCT(ride_id)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset` 
/*/

/* I explored the structure of the ride_id field to ensure consistency of data field by employing the LENGTH function. This was run to create a new column of ride_id 
lengths*/

SELECT 
LENGTH (ride_id) AS length_ride_id
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`

/NOTE* To explore my data further I ran a query on the length_ride_id data to pull any ride_id of more or less than 16 characters*/

SELECT 
ride_id
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset` 
WHERE
  LENGTH (ride_id) > 16
  AND
  LENGTH (ride_id) < 16

/* 2. rideable_type I ran this using the DISTINCT function to explore the different bike types. */

SELECT
DISTINCT (rideable_type)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`

/* NOTE Data constraint: As DISTINCT function returns docked_bike, classic_bike and electric_bike
docked_bike and classic_bike will be merged into classic_bike format. */

/* 3.start_at and ended_at , with the upper limit of 24 hours being calculated as minutes - 1440 minutes*/

SELECT *
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset` 
WHERE TIMESTAMP_DIFF(ended_at, started_at, MINUTE) <= 1 OR
   TIMESTAMP_DIFF(ended_at, started_at, MINUTE) >= 1440;

/*NOTE: Running the TIMESTAMP_DIFF function on ended_at, started_at resulted in 245,816 journeys not fulfilling our 
requirement of more than 1 minute and less than 1440 minutes*/

/*
4. Explore the start_station, end_station data to ensure validity and consistency*/


SELECT start_station_name, count(*)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`
GROUP BY start_station_name
ORDER BY start_station_name;

SELECT end_station_name, count(*)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`
GROUP BY end_station_name
ORDER BY end_station_name;

SELECT start_station_id, count(*)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`
GROUP BY start_station_id
ORDER BY start_station_id;

SELECT end_station_id, count(*)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`
GROUP BY end_station_id
ORDER BY end_station_id;

SELECT 
COUNT(DISTINCT(start_station_name)) AS unq_startname,
   COUNT(DISTINCT(end_station_name)) AS unq_endname,
   COUNT(DISTINCT(start_station_id)) AS unq_startid,
   COUNT(DISTINCT(end_station_id)) AS unq_endid
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`;

/*NOTE: In counting and grouping start_station, end_station data many inconsistencies and invalid data were discovered. Running the GROUPBY and ORDERBY These contained 
 a significant number of inconsistencies, trailing spaces and null entries. Station names that were temporary, maintenance for example will be removed, duplicated station 
names will also be removed.*/

/*6.start_lat, end_lat, start_long, end_long fields to be checked for null values. */

SELECT *
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`
WHERE start_lat IS NULL OR
 start_lng IS NULL OR
 end_lat IS NULL OR
 end_lng IS NULL;

/*NOTE: 5855 null rows were returned which will be removed during the cleaning process*/

/*7. Membership types, my final pre-cleaning exploration will be ensuring the parameters of 'casual' and 'member' customer membership are fulfilled. Using DISTINCT FUNCTION.*/

SELECT
DISTINCT (member_casual)
FROM `still-tensor-378918.Bikeshare_dataset.combined_dataset`


